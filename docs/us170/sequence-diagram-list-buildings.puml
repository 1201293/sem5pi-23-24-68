@startuml
'http://plantuml.com/skinparam.html
skinparam monochrome true
skinparam packageStyle rect
skinparam shadowing false


participant buildingRoute  as route
participant buildingController as controller
participant "mapper2:Json2DTO" as jsonMapper
participant "IBuildingDTO1:IBuildingDTO" as dto1
participant "IBuildingDTO1.1:IBuildingDTO" as dto2
participant "IBuildingService1:IBuildingService" as service
participant "building1:Building" as domain
participant "buildingRepo1:IBuildingRepo" as repository
participant "mapper2:Domain2Data" as mapper1
participant "Building1:BuildingData" as data
participant "dbDriver1:IDBDriver" as db
participant "Building1saved:Building" as savedDomain
participant "Buildingsaved1:BuildingData" as savedData



-> route: Get /buildings / (json)
activate route
  route->controller: getBuildings(json)
  activate controller
    controller ->service:listBuildings()
    activate service
    service->repository:findAll()
    activate repository
    repository -> db:find()
    activate db
    loop foreach savedBuilding
      db -> savedData**:create(savedBuilding)
    end
    db --> repository:savedBuildings
    deactivate
    loop foreach savedBuilding
    repository->mapper1:map2Model(savedBuilding)
    activate mapper1
    mapper1 -> savedDomain**
    savedDomain --> mapper1:buildingSaved
    mapper1 --> repository:buildingSaved
    end
    repository --> service:buildingSaved
    deactivate
    deactivate
    loop foreach savedBuilding                     
    service -> jsonMapper: map2dto(buildingSaved)
    activate jsonMapper
    jsonMapper -> savedDomain: getName()
    activate savedDomain
    savedDomain --> jsonMapper:name
    jsonMapper -> savedDomain: getCode()
    savedDomain --> jsonMapper:code
    jsonMapper -> savedDomain: getDescription()
    savedDomain --> jsonMapper:description
    jsonMapper -> savedDomain: getDimensions()
    savedDomain --> jsonMapper:dimensions
    deactivate
    jsonMapper --> dto2**:create(name,code,dimensions,description, ...)
    dto2 --> jsonMapper:savedBuildingDTO            
    jsonMapper --> service: savedBuildingDTO
    end
    deactivate
    service --> controller:savedBuildingsDTO
    deactivate
    controller -> jsonMapper:map2Json(savedsBuildingsDTO):json
    activate jsonMapper
    jsonMapper --> controller:json
    deactivate
    controller->controller:generateRes(json)
    controller--> route:response
    deactivate
    <- route:response
    deactivate





@enduml