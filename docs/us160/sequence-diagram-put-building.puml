@startuml sequence-diagram-put-building
'http://plantuml.com/skinparam.html
skinparam monochrome true
skinparam packageStyle rect
skinparam shadowing false


participant buildingRoute  as route
participant buildingController as controller
participant "mapper2:Json2DTO" as jsonMapper
participant "IBuildingDTO1:IBuildingDTO" as dto1
participant "IBuildingDTO1.1:IBuildingDTO" as dto2
participant "IBuildingService1:IBuildingService" as service
participant "building1:Building" as domain
participant "buildingRepo1:IBuildingRepo" as repository
participant "mapper2:Domain2Data" as mapper1
participant "Building1:BuildingData" as data
participant "dbDriver1:IDBDriver" as db
participant "Building1saved:Building" as savedDomain
participant "Buildingsaved1:BuildingData" as savedData



-> route: Put /buildings / (json)
activate route
  route->controller: updateBuilding(json)
  activate controller
    controller -> controller:validate(json)
    controller -> jsonMapper:map2DTO(json)
    activate jsonMapper
    jsonMapper -> dto1**:create(json)
    dto1-->jsonMapper:buildingDTO1
    jsonMapper --> controller:buildingDTO1
    deactivate
    controller ->service:updateBuilding(buildingDTO1)
    activate service
    service->repository:findByDomainId(buildingDTO1.id)
    activate repository
    repository -> db:findOne(query)
    activate db
    db -> savedData**:create(savedBuilding)
    db --> repository:savedBuilding
    deactivate
    repository->mapper1:map2Model(savedBuilding)
    activate mapper1
    mapper1 -> savedDomain**
    savedDomain --> mapper1:buildingSaved
    mapper1 --> repository:buildingSaved
    deactivate
    repository --> service:buildingSaved
    deactivate
    service -> savedDomain:setName(buildingDTO1.name)
    savedDomain --> service:buildingSaved
    service -> savedDomain:setCode(buildingDTO1.code)
    savedDomain --> service:buildingSaved
    service -> savedDomain:setDescription(buildingDTO1.description)
    savedDomain --> service:buildingSaved
    service -> savedDomain:setWidth(buildingDTO1.width)
    savedDomain --> service:buildingSaved
    service -> savedDomain:setDepth(buildingDTO1.depth)
    savedDomain --> service:buildingSaved
    service -> repository:save(buildingSaved)
    activate repository
    repository -> db:save(buildingSaved)
    db -> savedData**:create(savedBuilding)
    db --> repository:savedBuilding
    repository->mapper1:map2Model(savedBuilding)
    activate mapper1
    mapper1 -> savedDomain**
    savedDomain --> mapper1:buildingSaved
    mapper1 --> repository:buildingSaved
    deactivate
    repository --> service:buildingSaved
    deactivate
    service -> jsonMapper: map2dto(buildingSaved)
    activate jsonMapper
    jsonMapper -> savedDomain: getName()
    activate savedDomain
    savedDomain --> jsonMapper:name
    jsonMapper -> savedDomain: getCode()
    savedDomain --> jsonMapper:code
    jsonMapper -> savedDomain: getDescription()
    savedDomain --> jsonMapper:description
    jsonMapper -> savedDomain: getWidth()
    savedDomain --> jsonMapper:width
    jsonMapper -> savedDomain: getDepth()
    savedDomain --> jsonMapper:depthd
    deactivate
    jsonMapper --> dto2**:create(name,code,description,width,depth ...)
    dto2 --> jsonMapper:savedBuildingDTO
    jsonMapper --> service: savedBuildingDTO
    deactivate
    service --> controller:savedBuildingDTO
    deactivate
    controller -> jsonMapper:map2Json(savedBuildingDTO):json
    activate jsonMapper
    jsonMapper --> controller:json
    deactivate
    controller->controller:generateRes(json)
    controller--> route:response
    deactivate
    <- route:response
    deactivate





@enduml