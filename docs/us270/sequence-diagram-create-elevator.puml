@startuml
'http://plantuml.com/skinparam.html
skinparam monochrome true
skinparam packageStyle rect
skinparam shadowing false


participant ElevatorRoute  as route
participant ElevatorController as controller
participant "mapper2:Json2DTO" as jsonMapper
participant "IElevatorDTO1:IElevatorDTO" as dto1
participant "IElevatorDTO1.1:IElevatorDTO" as dto2
participant "IElevatorService1:IElevatorService" as service
participant "IBuildingService1:IBuildingService" as service2
participant "IFloorService1:IIFloorService" as service3
participant "Elevator1:Elevator" as domain
participant "ElevatorRepo1:IElevatorRepo" as repository
participant "BuildingRepo1:IBuildingRepo" as repository2
participant "FloorRepo1:IFloorRepo" as repository3
participant "mapper2:Domain2Data" as mapper1
participant "Elevator1:ElevatorData" as data
participant "dbDriver1:IDBDriver" as db
participant "Elevator1saved:Elevator" as savedDomain
participant "Elevatorsaved1:ElevatorData" as savedData



-> route: Post /Elevators / (json)
activate route
  route->controller: createElevator(json)
  activate controller
    controller -> controller:validate(json)
    controller -> jsonMapper:map2DTO(json)
    activate jsonMapper
    jsonMapper -> dto1**:create(json)
    dto1-->jsonMapper:ElevatorDTO1
    jsonMapper --> controller:ElevatorDTO1
    deactivate
    controller ->service:createElevator(ElevatorDTO1)
    activate service
    service -> service2:ValidateBuilding(ElevatorDTO1)
    activate service2
    service2 -> service:ValidBuilding
    deactivate service2

    alt ValidBuilding==false

    service -> controller:InvalidBuilding
    controller -> route:InvalidBuilding
    <- route:InvalidBuilding

    end
  
    service -> service3:ValidateFloor(ElevatorDTO1)
    activate service3
    service3 -> service:ValidFloor
    deactivate service3

    alt ValidFloor==false

    service -> controller:InvalidFloor
    controller -> route:InvalidFloor
    <- route:InvalidFloor

    end


    service-> domain**:create(Elevator1)
    domain --> service:Elevator1
    service->repository:save(Elevator1)
    activate repository
    repository -> mapper1:map2Data(Elevator1)
    activate mapper1
    mapper1 -> domain:getCode()
    activate domain
    domain--> mapper1:code
    mapper1 -> domain:getName()
    domain--> mapper1:name
    mapper1 -> domain:getDescription()
    domain--> mapper1:description
    mapper1 -> domain:getDimensions()
    domain--> mapper1:dimensions
    mapper1 -> domain:getBuilding()
    domain--> mapper1:building
    mapper1 -> domain:getFloors()
    domain--> mapper1:floors
    deactivate
    mapper1 -> data**:create(code,name,dimensions,description, building, floor ...)
    data --> mapper1:ElevatorData
    mapper1 --> repository:ElevatorData
    deactivate
    repository -> db:save(ElevatorData)
    activate db
    db -> savedData**:create(savedElevator)
    db --> repository:savedElevator
    deactivate
    repository->mapper1:map2Model(savedElevator)
    activate mapper1
    mapper1 -> savedDomain**
    savedDomain --> mapper1:ElevatorSaved
    mapper1 --> repository:ElevatorSaved
    repository --> service:ElevatorSaved
    deactivate
    deactivate
    service -> jsonMapper: map2dto(ElevatorSaved)
    activate jsonMapper
    jsonMapper -> savedDomain: getName()
    activate savedDomain
    savedDomain --> jsonMapper:name
    jsonMapper -> savedDomain: getCode()
    savedDomain --> jsonMapper:code
    jsonMapper -> savedDomain: getDescription()
    savedDomain --> jsonMapper:description
    jsonMapper -> savedDomain: getDimensions()
    savedDomain --> jsonMapper:dimensions
    jsonMapper -> savedDomain: getBuilding()
    savedDomain --> jsonMapper:building
    jsonMapper -> savedDomain: getFloors()
    savedDomain --> jsonMapper:floors

    deactivate
    jsonMapper --> dto2**:create(name,code,dimensions,description,building,floors ...)
    dto2 --> jsonMapper:savedElevatorDTO
    jsonMapper --> service: savedElevatorDTO
    deactivate
    service --> controller:savedElevatorDTO
    deactivate
    controller -> jsonMapper:map2Json(savedElevatorDTO):json
    activate jsonMapper
    jsonMapper --> controller:json
    deactivate
    controller->controller:generateRes(json)
    controller--> route:response
    deactivate
    <- route:response
    deactivate





@enduml